mode:
  type: Standalone

databaseName: shardingsphere-db0
dataSources:
  db0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://localhost:3306/shardingsphere-db0?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
    username: root
    password:
  db1:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://localhost:3306/shardingsphere-db1?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
    username: root
    password:

# 分片规则配置
rules:
  - !SHARDING
    tables:
      # 逻辑表名称
      t_order:
        # 行表达式标识符可以使用 ${...} 或 $->{...}，但前者与 Spring 本身的属性文件占位符冲突，因此在 Spring 环境中使用行表达式标识符建议使用 $->{...}
        actualDataNodes: db${0..1}.t_order_${0..3}
        # 分库策略
        tableStrategy:
          standard:
            # 分片列名称
            shardingColumn: order_id
            # 分片算法名称
            shardingAlgorithmName: t_order_inline
        keyGenerateStrategy:
          column: order_id
          keyGeneratorName: snowflake

    # 分片算法配置
    shardingAlgorithms:
      database_inline:
        # 分片算法类型
        type: INLINE
        props:
          # 分片算法的行表达式（算法自行定义，此处为方便演示效果）
          algorithm-expression: db$->{order_id > 4?1:0}
      t_order_inline:
        # 分片算法类型
        type: INLINE
        props:
          # 分片算法的行表达式
          algorithm-expression: t_order_$->{order_id % 4}
    keyGenerators:
      snowflake:
        type: SNOWFLAKE
# 属性配置
props:
  # 展示修改以后的sql语句
  sql-show: true
